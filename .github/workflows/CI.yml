name: CI
on:
  pull_request:
  push:
  schedule:
    - cron: '0 0 * * *'

env:
  RUST_BACKTRACE: full

jobs:
  lint:
    name: Lint
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v1

      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true
          components: rustfmt

      - name: cargo fmt --check
        uses: actions-rs/cargo@v1
        with:
          command: fmt
          args: --all -- --check

  docs:
    name: Create docs
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v1

      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true

      - name: cargo doc
        uses: actions-rs/cargo@v1
        with:
          command: doc

  test:
    name: Test ${{ matrix.rust }} on ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        rust:
          - stable
          - beta
          - nightly

        os:
          - ubuntu-latest
          - windows-latest
          - macOS-latest

        include:
          - os: ubuntu-latest
            arch: linux_amd64
          - os: windows-latest
            arch: windows_amd64
            extension: .exe
          - os: macOS-latest
            arch: darwin_amd64

    runs-on: ${{ matrix.os }}

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Install Rust (${{ matrix.rust }})
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: ${{ matrix.rust }}
          override: true

      - name: Build
        uses: actions-rs/cargo@v1
        with:
          command: build
          args: "--release"

      - name: Test
        uses: actions-rs/cargo@v1
        with:
          command: test
          args: "-- --nocapture"

      - name: Get branch/tag name
        id: parse_gh_ref
        uses: olegtarasov/get-tag@v2

      - name: Set Git tag
        uses: allenevans/set-env@v1.0.0
        with:
          overwrite: true
          GIT_TAG_NAME: ${{ steps.parse_gh_ref.outputs.tag }}

      - name: Print tag
        run: echo ${{ env.GIT_TAG_NAME }}

      - name: Upload binaries
        uses: actions/upload-artifact@v1
        if: matrix.rust == 'stable'
        with:
          #name: test_${{ github.ref }}_${{ matrix.arch }}
          name: test_${{ steps.parse_gh_ref.outputs.tag }}_${{ matrix.arch }}${{ matrix.extension}}
          path: "target/release/test${{ matrix.extension}}"

  release:
    name: Create a release
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')
    steps:
      - name: Checkout
        uses: actions/checkout@v1
      - name: Get branch/tag name
        id: parse_gh_ref
        uses: olegtarasov/get-tag@v2
      - name: Create release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          body: |
            Changes in this Release
              - First Change
              - Second Change
              - Third Change
          draft: true
          prerelease: false
      - name: Store release context
        run: |
            cat <<EOF > release_context
            ::set-output name=tag::${{ steps.parse_gh_ref.outputs.tag }}
            ::set-output name=upload_url::${{ steps.create_release.outputs.upload_url }}
            EOF
      - name: Upload release context
        uses: actions/upload-artifact@v1
        with:
          name: release_context
          path: release_context

  release_assets:
    name: Upload release assets (${{ matrix.os }})
    needs: release
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')
    runs-on: ubuntu-latest
    strategy:
      matrix:
        os:
          - ubuntu-latest
          - windows-latest
          - macOS-latest

        include:
          - os: ubuntu-latest
            arch: linux_amd64
          - os: windows-latest
            arch: windows_amd64
            extension: .exe
          - os: macOS-latest
            arch: darwin_amd64

    steps:
      - name: Download release context
        uses: actions/download-artifact@v1
        with:
          name: release_context
          path: ctx
      - name: Restore release context
        id: release_ctx
        run: cat ctx/release_context

      # REMOVE ME
      - name: Dump steps context
        env:
          STEPS_CONTEXT: ${{ toJson(steps) }}
        run: echo "$STEPS_CONTEXT"
      - name: Echo context
        run: echo "$(cat ctx/release_context)"
      ##############

      - name: Download binary
        uses: actions/download-artifact@v1
        with:
          name: test_${{ steps.release_ctx.outputs.tag }}_${{ matrix.arch }}${{ matrix.extension}}
          path: assets_${{ matrix.arch }}
      - name: Upload release asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.release_ctx.outputs.upload_url }}
          asset_path: assets_${{ matrix.arch }}/test${{ matrix.extension }}
          asset_name: test_${{ steps.release_ctx.outputs.tag }}_${{ matrix.arch }}${{ matrix.extension}}
          asset_content_type: application/octet-stream
